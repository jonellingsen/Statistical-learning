X.new <- zip.test[response==2|response==3,-1]
y.new <- response[response==2|response==3]
n.new<-length(y.new)
# prediction
y.hat <- cbind(rep(1,n.new),X.new)%*%beta
G.hat<-ifelse(y.hat<=2.5,2,3)
# prediciton error with 0-1 loss
test.error.ls<-sum( (y.new-G.hat)^2 )
test.percentage.missclassification.ls<-sum( (y.new-G.hat)^2 )/n # since 1^2=1=(-1)^2
test.percentage.missclassification.ls
mean(y.new == G.hat)
1 - mean(y.new == G.hat)
y.new == G.hat
ifelse(y.new == G.hat, 1, 0)
mean(ifelse(y.new == G.hat, 1, 0))
test.percentage.missclassification.ls<-sum( (y.new-G.hat)^2 )/n.new
test.percentage.missclassification.ls
library(ElemStatLearn)
data(zip.train)
str(zip.train)
image(zip2image(zip.train,2),col = gray((32:0)/32))
# 7291 observations in the training set
head(zip.train)
# first column is the response, then 16x16=256 pixel intensities
response <- zip.train[,1]
X <- zip.train[response==2|response==3,-1]
y <- response[response==2|response==3]
n<-length(y)
### least square ###
model<-lm(y~X)
beta<-model$coefficients
y.hat<-cbind(rep(1,n),X)%*%beta
G.hat<-ifelse(y.hat<=2.5,2,3)
# prediciton error with 0-1 loss
training.error.ls<-sum( (y-G.hat)^2 )
training.percentage.missclassification.ls<-sum( (y-G.hat)^2 )/n # since 1^2=1=(-1)^2
# test set
data(zip.test)
str(zip.test)
response <- zip.test[,1]
X.new <- zip.test[response==2|response==3,-1]
y.new <- response[response==2|response==3]
n.new<-length(y.new)
# prediction
y.hat <- cbind(rep(1,n.new),X.new)%*%beta
G.hat<-ifelse(y.hat<=2.5,2,3)
# prediciton error with 0-1 loss
test.error.ls<-sum( (y.new-G.hat)^2 )
test.percentage.missclassification.ls<-sum( (y.new-G.hat)^2 )/n.new # since 1^2=1=(-1)^2
### k-nearest neighbours ###
distance<-function(x,x_1) sqrt(sum((x - x_1) ^ 2))
find.k.neighbours<-function(candidate,other,k)
{
distances<-apply(other,1,distance,x_1=candidate)
order(distances)[1:k]
}
kNN<-function(X.new,X,y,k)
{
# X.new = input
# X = training data
# y = response training data
# k = number of neighbours
# first iteration
neighbours<-find.k.neighbours(X.new[1,],X,k)
y.neighbours<-y[neighbours]
y.hat<-mean(y.neighbours)
for (i in 2:nrow(X.new))
{
neighbours<-find.k.neighbours(X.new[i,],X,k)
y.hat<-c(y.hat,mean(y[neighbours]))
print(i)
}
y.hat
}
y.hat_kNN.1<-kNN(X.new=X,X=X,y=y,k=1)
G.hat_kNN.1<-ifelse(y.hat_kNN.1<=2.5,2,3)
y.hat_kNN.3<-kNN(X,X,y,3)
G.hat_kNN.3<-ifelse(y.hat_kNN.3<=2.5,2,3)
y.hat_kNN.5<-kNN(X,X,y,5)
G.hat_kNN.5<-ifelse(y.hat_kNN.5<=2.5,2,3)
y.hat_kNN.7<-kNN(X,X,y,7)
G.hat_kNN.7<-ifelse(y.hat_kNN.7<=2.5,2,3)
y.hat_kNN.15<-kNN(X,X,y,15)
G.hat_kNN.15<-ifelse(y.hat_kNN.15<=2.5,2,3)
# prediciton error with 0-1 loss
training.error.kNN_1<-sum( (y-G.hat_kNN.1)^2 )
training.percentage.missclassification.kNN_1<-sum( (y-G.hat_kNN.1)^2 )/n # since 1^2=1=(-1)^2
training.error.kNN_3<-sum( (y-G.hat_kNN.3)^2 )
training.percentage.missclassification.kNN_3<-sum( (y-G.hat_kNN.3)^2 )/n # since 1^2=1=(-1)^2
training.error.kNN_5<-sum( (y-G.hat_kNN.5)^2 )
training.percentage.missclassification.kNN_5<-sum( (y-G.hat_kNN.5)^2 )/n # since 1^2=1=(-1)^2
training.error.kNN_7<-sum( (y-G.hat_kNN.7)^2 )
training.percentage.missclassification.kNN_7<-sum( (y-G.hat_kNN.7)^2 )/n # since 1^2=1=(-1)^2
training.error.kNN_15<-sum( (y-G.hat_kNN.15)^2 )
training.percentage.missclassification.kNN_15<-sum( (y-G.hat_kNN.15)^2 )/n # since 1^2=1=(-1)^2
# test set #
y.hat_kNN.1<-kNN(X.new=X.new,X=X,y=y,k=1)
G.hat_kNN.1<-ifelse(y.hat_kNN.1<=2.5,2,3)
y.hat_kNN.3<-kNN(X.new,X,y,3)
G.hat_kNN.3<-ifelse(y.hat_kNN.3<=2.5,2,3)
y.hat_kNN.5<-kNN(X.new,X,y,5)
G.hat_kNN.5<-ifelse(y.hat_kNN.5<=2.5,2,3)
y.hat_kNN.7<-kNN(X.new,X,y,7)
G.hat_kNN.7<-ifelse(y.hat_kNN.7<=2.5,2,3)
y.hat_kNN.15<-kNN(X.new,X,y,15)
G.hat_kNN.15<-ifelse(y.hat_kNN.15<=2.5,2,3)
# prediciton error with 0-1 loss
test.error.kNN_1<-sum( (y.new-G.hat_kNN.1)^2 )
test.percentage.missclassification.kNN_1<-sum( (y.new-G.hat_kNN.1)^2 )/n.new # since 1^2=1=(-1)^2
test.error.kNN_3<-sum( (y.new-G.hat_kNN.3)^2 )
test.percentage.missclassification.kNN_3<-sum( (y.new-G.hat_kNN.3)^2 )/n.new # since 1^2=1=(-1)^2
test.error.kNN_5<-sum( (y.new-G.hat_kNN.5)^2 )
test.percentage.missclassification.kNN_5<-sum( (y.new-G.hat_kNN.5)^2 )/n.new # since 1^2=1=(-1)^2
test.error.kNN_7<-sum( (y.new-G.hat_kNN.7)^2 )
test.percentage.missclassification.kNN_7<-sum( (y.new-G.hat_kNN.7)^2 )/n.new # since 1^2=1=(-1)^2
test.error.kNN_15<-sum( (y.new-G.hat_kNN.15)^2 )
test.percentage.missclassification.kNN_15<-sum( (y.new-G.hat_kNN.15)^2 )/n.new # since 1^2=1=(-1)^2
cat('training errors (percentage missallocated)\n')
cat('----------------\n')
cat('LS: ',training.percentage.missclassification.ls,'\n')
cat('KNN(1): ',training.percentage.missclassification.kNN_1,'\n')
cat('KNN(3): ',training.percentage.missclassification.kNN_3,'\n')
cat('KNN(5): ',training.percentage.missclassification.kNN_5,'\n')
cat('KNN(7): ',training.percentage.missclassification.kNN_7,'\n')
cat('KNN(15): ',training.percentage.missclassification.kNN_15,'\n')
cat('######################\n')
cat('test errors (percentage missallocated)\n')
cat('------------\n')
cat('LS: ',test.percentage.missclassification.ls,'\n')
cat('KNN(1): ',test.percentage.missclassification.kNN_1,'\n')
cat('KNN(3): ',test.percentage.missclassification.kNN_3,'\n')
cat('KNN(5): ',test.percentage.missclassification.kNN_5,'\n')
cat('KNN(7): ',test.percentage.missclassification.kNN_7,'\n')
cat('KNN(15): ',test.percentage.missclassification.kNN_15,'\n')
?ifelse
mean(y.new == G.hat)
mean(y.new != G.hat)
list(1, 2)
array(1, 2)
gamesPerPlayer = array(1,1,1,1,1,1,1,1,1,3,20,13,119,11,11,10,1,34,57,100,2,14,1,14,4,30,79,10,20,15,13,17,13,21,171,14,57,49,13,38,15,28,104,16,146,2,10,6,92,34,11,146,9,21,14,35,9,3,14,219,2,7,26,82,128,261,1,1,2,33,12,14,2,4,2,11,2,1,78,8,15,49,125,28,77,95,33,6,41,52,4,6,1,2,44,36,37,40,54,22,15,25,105,19,39,7,11,25,5,50,50,53,11,5,240,13,140,129,7,24,13,31,10,6,14,154,2,4,8,14,8,6,6,13,79,19,36,3,10,158,21,1,3,16,5,6,5,17,5,5,39,22,25,2,16,10,3,4,38,47,95,70,1,7,73,7,28,84,2,16,7,130,73,4,142,3,5,7,4,4,3,122,50,33,91,3,4,9,1,1,1,32,48,9,13,71,17,2,1,5,1,1,1,2,4,4,2,2,2,14,32,9,1,1,1,10,1,1,91,3,3,5,6,6,21,3,1,16,5,1,2,47,1,52,11,26,4,2,3,1,2,1,4,2,88,13,11,34,10,30,93,2,101,7,16,62,144,113,4,5,82,3,16,6,1,9,9,102,160,48,1,7,2,6,25,2,18,3,26,66,6,7,10,1,4,16,7,6,8,19,8,17,46,4,12,35,9,51,3,1,7,60,34,11,5,126,14,4,85,1,1,17,5,11,34,10,9,9,122,15,1,4,16,3,47,2,7,24,6,9,48,4,11,6,17,47,4,6,6,3,54,7,5,20,9,1,3,4,1,15,1,10,34,27,3,1,12,36,3,1,11,10,3,10,1,5,36,52,3,7,7,14,97,2,30,26,23,1,1,22,4,14,3,1,2,1,2,4,4,7,1,3,1,1,2,1,21,2,2,2,1,1,2,4,22,28,11,57,2,15,4,35,4,2,67,16,3,5,2,3,38,36,4,52,5,9,37,31,8,47,23,84,25,1,6,9,12,35,5,2,8,3,1,21,66,5,3,6,5,2,10,11,12,5,5,39,9,23,12,13,7,3,1,7,10,9,8,5,3,19,89,3,8,30,45,12,2,1,28,45,2,26,8,7,2,4,9,24,33,4,45,22,1,2,24,12,24,1,1,1,2,12,23,2,16,2,18,8,6,1,8,5,5,3,51,8,1,15,4,4,4,7,2,3,10,9,3,1,5,41,7,14,13,23,70,41,7,57,22,3,14,17,1,30,2,7,29,7,10,4,16,4,32,13,12,13,1,9,4,4,1,2,2,5,1,14,3,1,48,2,2,1,26,9,7,16,5,6,11,1,3,3,3,3,21,42,3,4,1,4,2,59,13,21,11,3,5,4,3,8,5,1,1,41,65,1,19,1,41,7,20,26,1,24,6,10,11,3,19,1,1,1,10,12,1,1,19,8,6,1,1,9,7,1,21,17,1,7,1,13,3,22,16,9,18,1,20,73,5,3,8,6,5,3,10,6,5,10,4,31,4,40,4,8,4,7,7,39,7,10,4,5,3,2,1,5,18,13,25,18,2,1,18,5,41,1,3,3,3,2,3,7,1,8,3,13,13,10,41,1,1,4,9,2,4,8,6,1,51,5,3,9,58,1,2,14,29,32,2,1,9,12,13,52,4,6,5,11,26,1,1,13,46,20,8,32,10,4,4,38,3,29,10,8,3,1,39,51,31,17,10,9,54,9,1,9,6,6,1,2,4,8,5,3,4,6,2,1,4,3,3,3,8,8,4,4,2,2,2,20,9,15,5,19,11,25,2,33,7,12,7,7,3,2,2,2,9,15,3,6,29,5,2,16,17,1,1,10,6,23,4,4,2,61,3,14,13,15,53,4,3,21,47,5,4,12,3,1,1,7,1,1,1,1,1,2,4,97,4,6,6,3,20,6,2,24,12,10,10,27,13,12,13,8,10,4,3,4,8,10,23,9,17,22,11,9,5,9,27,1,1,1,16,4,16,34,4,29,15,7,3,6,1,3,52,24,29,5,9,20,8,10,2,22,16,5,27,7,17,14,14,3,12,23,45,1,10,1,3,9,1,27,1,1,2,2,10,47,6,6,6,16,2,14,28,6,1,14,2,6,19,2,5,5,21,2,1,5,6,20,15,22,4,2,4,2,56,8,2,8,45,48,33,9,18,4,6,1,4,6,1,16,3,8,6,1,9,51,9,7,9,3,1,1,4,5,24,18,7,6,11,3,13,6,3,1,2,18,1,6,42,9,3,4,1,1,20,2,5,4,7,5,5,2,14,10,8,3,6,1,4,4,15,2,3,8,1,12,4,10,9,1,1,8,3,10,2,4,3,12,10,1,2,8,1,5,2,2,8,26,29,29,2,8,15,8,8,6,8,17,31,6,82,14,5,15,6,14,7,4,3,1,2,1,2,1,4,7,1,1,8,1,1,1,1,6,68,5,8,4,2,11,5,3,5,12,3,4,5,4,18,1,1,1,2,15,8,11,6,2,7,14,8,12,15,1,3,13,1,1,1,18,5,8,6,6,8,2,3,2,12,10,1,2,2,3,6,4,6,6,8,2,4,5,5,1,3,5,2,1,1,2,2,3,6,3,3,3,3,5,4,4,4,10,4,1,1,1,29,20,7,17,24,23,25,1,1,3,13,4,7,6,4,5,8,1,6,2,5,1,5,7,20,4,6,2,1,2,6,7,1,17,4,1,17,27,20,2,1,23,46,36,5,6,4,3,4,4,2,7,2,2,2,2,9,3,2,3,22,23,8,4,12,9,1,5,2,2,1,8,5,3,9,3,3,5,2,2,2,2,1,1,6,4,4,7,16,5,3,5,5,2,4,8,1,7,6,1,3,1,4,1,1,1,1,1,2,7,1,54,6,1,41,5,3,11,7,13,1,11,1,1,10,1,1,14,2,8,2,1,2,9,7,8,7,8,1,15,5,13,32,8,2,15,2,7,2,18,2,4,13,1,1,2,4,4,1,3,2,2,17,1,3,3,2,2,10,6,10,9,1,1,1,1,1,1,6,3,2,2,14,2,2,13,4,7,1,9,1,4,3,7,1,14,7,23,2,2,1,1,1,24,19,5,8,3,7,2,20,1,3,1,1,13,1,34,56,1,9,14,1,10,6,4,4,11,4,4,6,4,2,14,3,1,1,1,33,2,2,3,3,3,13,10,10,5,15,1,16,1,2,3,26,6,4,3,5,7,15,7,2,1,3,1,2,2,1,1,10,40,6,21,1,8,1,10,4,6,2,6,3,7,8,5,1,8,1,9,2,15,1,26,18,9,3,10,1,5,10,1,1,23,13,10,4,8,3,5,5,5,26,2,23,13,5,20,1,4,1,1,1,1,51,3,2,1,17,1,1,1,1,25,3,12,11,15,10,9,7,9,6,3,2,3,23,22,11,2,3,1,9,1,6,8,1,23,4,14,16,1,2,1,2,4,8,12,3,2,19,14,6,6,17,9,4,1,10,4,9,27,8,4,14,2,34,3,2,10,16,4,4,1,11,5,1,10,20,23,23,5,1,3,5,8,5,21,3,1,1,6,3,7,56,5,11,4,2,1,1,6,3,7,7,7,3,24,4,1,3,1,1,1,2,1,1,1,3,1,1,5,1,1,2,1,2,3,6,1,6,10,2,1,10,1,1,1,1,16,11,16,1,4,2,5,6,22,25,13,3,2,2,3,2,6,1,22,5,3,3,35,6,11,11,1,1,1,1,1,1,1,1,1,5,18,1,1,1,1,1,1,1,1,14,2,1,14,2,3,18,2,3,25,5,9,38,45,8,6,15,4,15,7,11,10,6,7,2,5,4,2,51,13,9,4,2,1,9,14,6,1,1,4,6,1,1,1,1,1,1,14,23,15,14,36,3,3,5,1,5,2,13,13,21,24,3,13,6,1,4,2,1,12,11,4,1,4,13,43,1,1,5,4,9,1,2,23,11,27,2,4,2,9,1,11,9,10,5,4,4,28,5,10,17,8,12,4,3,17,2,2,2,10,1,5,4,3,5,1,1,2,1,1,17,6,3,8,6,20,19,5,6,1,1,4,10,6,1,1,11,3,5,10,4,1,1,3,10,10,3,4,3,1,5,10,2,3,3,3,12,1,7,1,4,3,1,15,1,1,10,3,7,10,4,16,16,2,3,1,1,9,6,5,13,28,11,18,3,3,2,4,4,17,10,4,11,9,17,3,3,2,1,1,1,1,1,1,1,10,9,1,1,1,11,7,6,1,1,1,12,1,1,9,1,7,15,10,17,1,15,1,6,2,12,44,19,15,6,3,3,1,5,2,1,6,5,4,12,15,2,2,4,3,2,5,2,15,3,2,12,9,19,37,5,2,5,1,7,23,17,19,8,1,1,1,1,11,21,1,5,5,1,3,1,1,12,1,1,3,9,4,9,2,6,14,1,14,5,1,6,1,1,16,15,21,9,1,1,1,8,12,2,3,10,1,2,3,1,21,3,16,7,19,3,2,16,1,4,1,2,3,2,3,2,1,5,8,8,7,6,1,9,1,6,7,2,1,2,2,1,1,5,1,3,3,3,2,1,11,11,13,12,6,5,29,4,3,2,10,10,10,10,26,35,5,2,19,3,10,4,5,4,6,3,4,2,5,3,1,1,14,1,9,1,8,3,1,2,1,3,4,6,3,3,8,2,1,1,2,2,1,5,4,1,1,2,2,3,1,4,18,1,1,1,1,3,1,1,2,2,1,3,1,1,1,1,2,1,1,1,1,1,22,4,21,13,1,1,1,2,1,3,3,5,2,5,3,20,5,18,5,4,5,2,11,1,2,4,9,8,8,8,3,3,9,1,8,7,7,5,1,5,1,1,7,20,6,12,11,5,2,16,20,18,4,15,7,12,1,1,1,4,1,3,2,10,2,3,1,9,6,3,2,1,1,18,11,1,4,3,4,3,2,4,2,2,3,1,1,3,11,16,14,16,1,1,1,3,2,8,1,5,1,6,1,1,2,1,1,1,7,6,1,1,1,1,1,3,1,2,1,1,1,1,5,3,1,1,1,1,1,1,1,1,5,5,1,1,1,3,1,2,1,1,1,1,1,5,6,9,8,4,2,1,1,7,7,8,1,6,1,3,2,3,3,3,2,8,6,1,16,1,2,3,4,4,10,6,1,9,69,4,11,2,1,5,8,8,6,4,7,1,3,5,5,1,5,9,2,4,2,2,4,2,2,1,2,5,2,11,12,12,9,3,1,1,16,1,2,3,2,1,6,17,2,2,2,8,7,1,2,6,4,4,7,2,3,2,2,1,8,7,3,3,3,1,8,3,2,3,1,2,4,9,3,6,4,1,1,3,6,1,3,7,1,2,1,4,8,3,3,3,2,1,6,5,5,2,1,5,1,4,4,1,5,5,6,14,4,4,2,10,2,1,11,11,1,1,4,6,8,3,2,6,7,1,1,2,3,2,1,1,5,6,3,5,1,5,1,4,10,9,1,3,2,2,1,2,15,1,1,1,1,1,2,1,2,3,2,2,3,6,4,2,2,4,6,2,2,1,5,4,2,4,4,4,2,2,3,4,1,6,1,1,1,1,1,1,3,3,5,1,3,1,2)
gamesPerPlayer
View(train.data)
gamesPerPlayer = array(1,1,1,1,1,1,1,1,1,3,20,13,119,11,11,10,1,34,57,100,2,14,1,14,4,30,79,10,20,15,13,17,13,21,171,14,57,49,13,38,15,28,104,16,146,2,10,6,92,34,11,146,9,21,14,35,9,3,14,219,2,7,26,82,128,261,1,1,2,33,12,14,2,4,2,11,2,1,78,8,15,49,125,28,77,95,33,6,41,52,4,6,1,2,44,36,37,40,54,22,15,25,105,19,39,7,11,25,5,50,50,53,11,5,240,13,140,129,7,24,13,31,10,6,14,154,2,4,8,14,8,6,6,13,79,19,36,3,10,158,21,1,3,16,5,6,5,17,5,5,39,22,25,2,16,10,3,4,38,47,95,70,1,7,73,7,28,84,2,16,7,130,73,4,142,3,5,7,4,4,3,122,50,33,91,3,4,9,1,1,1,32,48,9,13,71,17,2,1,5,1,1,1,2,4,4,2,2,2,14,32,9,1,1,1,10,1,1,91,3,3,5,6,6,21,3,1,16,5,1,2,47,1,52,11,26,4,2,3,1,2,1,4,2,88,13,11,34,10,30,93,2,101,7,16,62,144,113,4,5,82,3,16,6,1,9,9,102,160,48,1,7,2,6,25,2,18,3,26,66,6,7,10,1,4,16,7,6,8,19,8,17,46,4,12,35,9,51,3,1,7,60,34,11,5,126,14,4,85,1,1,17,5,11,34,10,9,9,122,15,1,4,16,3,47,2,7,24,6,9,48,4,11,6,17,47,4,6,6,3,54,7,5,20,9,1,3,4,1,15,1,10,34,27,3,1,12,36,3,1,11,10,3,10,1,5,36,52,3,7,7,14,97,2,30,26,23,1,1,22,4,14,3,1,2,1,2,4,4,7,1,3,1,1,2,1,21,2,2,2,1,1,2,4,22,28,11,57,2,15,4,35,4,2,67,16,3,5,2,3,38,36,4,52,5,9,37,31,8,47,23,84,25,1,6,9,12,35,5,2,8,3,1,21,66,5,3,6,5,2,10,11,12,5,5,39,9,23,12,13,7,3,1,7,10,9,8,5,3,19,89,3,8,30,45,12,2,1,28,45,2,26,8,7,2,4,9,24,33,4,45,22,1,2,24,12,24,1,1,1,2,12,23,2,16,2,18,8,6,1,8,5,5,3,51,8,1,15,4,4,4,7,2,3,10,9,3,1,5,41,7,14,13,23,70,41,7,57,22,3,14,17,1,30,2,7,29,7,10,4,16,4,32,13,12,13,1,9,4,4,1,2,2,5,1,14,3,1,48,2,2,1,26,9,7,16,5,6,11,1,3,3,3,3,21,42,3,4,1,4,2,59,13,21,11,3,5,4,3,8,5,1,1,41,65,1,19,1,41,7,20,26,1,24,6,10,11,3,19,1,1,1,10,12,1,1,19,8,6,1,1,9,7,1,21,17,1,7,1,13,3,22,16,9,18,1,20,73,5,3,8,6,5,3,10,6,5,10,4,31,4,40,4,8,4,7,7,39,7,10,4,5,3,2,1,5,18,13,25,18,2,1,18,5,41,1,3,3,3,2,3,7,1,8,3,13,13,10,41,1,1,4,9,2,4,8,6,1,51,5,3,9,58,1,2,14,29,32,2,1,9,12,13,52,4,6,5,11,26,1,1,13,46,20,8,32,10,4,4,38,3,29,10,8,3,1,39,51,31,17,10,9,54,9,1,9,6,6,1,2,4,8,5,3,4,6,2,1,4,3,3,3,8,8,4,4,2,2,2,20,9,15,5,19,11,25,2,33,7,12,7,7,3,2,2,2,9,15,3,6,29,5,2,16,17,1,1,10,6,23,4,4,2,61,3,14,13,15,53,4,3,21,47,5,4,12,3,1,1,7,1,1,1,1,1,2,4,97,4,6,6,3,20,6,2,24,12,10,10,27,13,12,13,8,10,4,3,4,8,10,23,9,17,22,11,9,5,9,27,1,1,1,16,4,16,34,4,29,15,7,3,6,1,3,52,24,29,5,9,20,8,10,2,22,16,5,27,7,17,14,14,3,12,23,45,1,10,1,3,9,1,27,1,1,2,2,10,47,6,6,6,16,2,14,28,6,1,14,2,6,19,2,5,5,21,2,1,5,6,20,15,22,4,2,4,2,56,8,2,8,45,48,33,9,18,4,6,1,4,6,1,16,3,8,6,1,9,51,9,7,9,3,1,1,4,5,24,18,7,6,11,3,13,6,3,1,2,18,1,6,42,9,3,4,1,1,20,2,5,4,7,5,5,2,14,10,8,3,6,1,4,4,15,2,3,8,1,12,4,10,9,1,1,8,3,10,2,4,3,12,10,1,2,8,1,5,2,2,8,26,29,29,2,8,15,8,8,6,8,17,31,6,82,14,5,15,6,14,7,4,3,1,2,1,2,1,4,7,1,1,8,1,1,1,1,6,68,5,8,4,2,11,5,3,5,12,3,4,5,4,18,1,1,1,2,15,8,11,6,2,7,14,8,12,15,1,3,13,1,1,1,18,5,8,6,6,8,2,3,2,12,10,1,2,2,3,6,4,6,6,8,2,4,5,5,1,3,5,2,1,1,2,2,3,6,3,3,3,3,5,4,4,4,10,4,1,1,1,29,20,7,17,24,23,25,1,1,3,13,4,7,6,4,5,8,1,6,2,5,1,5,7,20,4,6,2,1,2,6,7,1,17,4,1,17,27,20,2,1,23,46,36,5,6,4,3,4,4,2,7,2,2,2,2,9,3,2,3,22,23,8,4,12,9,1,5,2,2,1,8,5,3,9,3,3,5,2,2,2,2,1,1,6,4,4,7,16,5,3,5,5,2,4,8,1,7,6,1,3,1,4,1,1,1,1,1,2,7,1,54,6,1,41,5,3,11,7,13,1,11,1,1,10,1,1,14,2,8,2,1,2,9,7,8,7,8,1,15,5,13,32,8,2,15,2,7,2,18,2,4,13,1,1,2,4,4,1,3,2,2,17,1,3,3,2,2,10,6,10,9,1,1,1,1,1,1,6,3,2,2,14,2,2,13,4,7,1,9,1,4,3,7,1,14,7,23,2,2,1,1,1,24,19,5,8,3,7,2,20,1,3,1,1,13,1,34,56,1,9,14,1,10,6,4,4,11,4,4,6,4,2,14,3,1,1,1,33,2,2,3,3,3,13,10,10,5,15,1,16,1,2,3,26,6,4,3,5,7,15,7,2,1,3,1,2,2,1,1,10,40,6,21,1,8,1,10,4,6,2,6,3,7,8,5,1,8,1,9,2,15,1,26,18,9,3,10,1,5,10,1,1,23,13,10,4,8,3,5,5,5,26,2,23,13,5,20,1,4,1,1,1,1,51,3,2,1,17,1,1,1,1,25,3,12,11,15,10,9,7,9,6,3,2,3,23,22,11,2,3,1,9,1,6,8,1,23,4,14,16,1,2,1,2,4,8,12,3,2,19,14,6,6,17,9,4,1,10,4,9,27,8,4,14,2,34,3,2,10,16,4,4,1,11,5,1,10,20,23,23,5,1,3,5,8,5,21,3,1,1,6,3,7,56,5,11,4,2,1,1,6,3,7,7,7,3,24,4,1,3,1,1,1,2,1,1,1,3,1,1,5,1,1,2,1,2,3,6,1,6,10,2,1,10,1,1,1,1,16,11,16,1,4,2,5,6,22,25,13,3,2,2,3,2,6,1,22,5,3,3,35,6,11,11,1,1,1,1,1,1,1,1,1,5,18,1,1,1,1,1,1,1,1,14,2,1,14,2,3,18,2,3,25,5,9,38,45,8,6,15,4,15,7,11,10,6,7,2,5,4,2,51,13,9,4,2,1,9,14,6,1,1,4,6,1,1,1,1,1,1,14,23,15,14,36,3,3,5,1,5,2,13,13,21,24,3,13,6,1,4,2,1,12,11,4,1,4,13,43,1,1,5,4,9,1,2,23,11,27,2,4,2,9,1,11,9,10,5,4,4,28,5,10,17,8,12,4,3,17,2,2,2,10,1,5,4,3,5,1,1,2,1,1,17,6,3,8,6,20,19,5,6,1,1,4,10,6,1,1,11,3,5,10,4,1,1,3,10,10,3,4,3,1,5,10,2,3,3,3,12,1,7,1,4,3,1,15,1,1,10,3,7,10,4,16,16,2,3,1,1,9,6,5,13,28,11,18,3,3,2,4,4,17,10,4,11,9,17,3,3,2,1,1,1,1,1,1,1,10,9,1,1,1,11,7,6,1,1,1,12,1,1,9,1,7,15,10,17,1,15,1,6,2,12,44,19,15,6,3,3,1,5,2,1,6,5,4,12,15,2,2,4,3,2,5,2,15,3,2,12,9,19,37,5,2,5,1,7,23,17,19,8,1,1,1,1,11,21,1,5,5,1,3,1,1,12,1,1,3,9,4,9,2,6,14,1,14,5,1,6,1,1,16,15,21,9,1,1,1,8,12,2,3,10,1,2,3,1,21,3,16,7,19,3,2,16,1,4,1,2,3,2,3,2,1,5,8,8,7,6,1,9,1,6,7,2,1,2,2,1,1,5,1,3,3,3,2,1,11,11,13,12,6,5,29,4,3,2,10,10,10,10,26,35,5,2,19,3,10,4,5,4,6,3,4,2,5,3,1,1,14,1,9,1,8,3,1,2,1,3,4,6,3,3,8,2,1,1,2,2,1,5,4,1,1,2,2,3,1,4,18,1,1,1,1,3,1,1,2,2,1,3,1,1,1,1,2,1,1,1,1,1,22,4,21,13,1,1,1,2,1,3,3,5,2,5,3,20,5,18,5,4,5,2,11,1,2,4,9,8,8,8,3,3,9,1,8,7,7,5,1,5,1,1,7,20,6,12,11,5,2,16,20,18,4,15,7,12,1,1,1,4,1,3,2,10,2,3,1,9,6,3,2,1,1,18,11,1,4,3,4,3,2,4,2,2,3,1,1,3,11,16,14,16,1,1,1,3,2,8,1,5,1,6,1,1,2,1,1,1,7,6,1,1,1,1,1,3,1,2,1,1,1,1,5,3,1,1,1,1,1,1,1,1,5,5,1,1,1,3,1,2,1,1,1,1,1,5,6,9,8,4,2,1,1,7,7,8,1,6,1,3,2,3,3,3,2,8,6,1,16,1,2,3,4,4,10,6,1,9,69,4,11,2,1,5,8,8,6,4,7,1,3,5,5,1,5,9,2,4,2,2,4,2,2,1,2,5,2,11,12,12,9,3,1,1,16,1,2,3,2,1,6,17,2,2,2,8,7,1,2,6,4,4,7,2,3,2,2,1,8,7,3,3,3,1,8,3,2,3,1,2,4,9,3,6,4,1,1,3,6,1,3,7,1,2,1,4,8,3,3,3,2,1,6,5,5,2,1,5,1,4,4,1,5,5,6,14,4,4,2,10,2,1,11,11,1,1,4,6,8,3,2,6,7,1,1,2,3,2,1,1,5,6,3,5,1,5,1,4,10,9,1,3,2,2,1,2,15,1,1,1,1,1,2,1,2,3,2,2,3,6,4,2,2,4,6,2,2,1,5,4,2,4,4,4,2,2,3,4,1,6,1,1,1,1,1,1,3,3,5,1,3,1,2)
array
View
array(1, 2, 3, 4, 5)
(1, 2, 3, 4)
c(1, 2, 3, 4, 5)
gamesPerPlayer = c(1,1,1,1,1,1,1,1,1,3,20,13,119,11,11,10,1,34,57,100,2,14,1,14,4,30,79,10,20,15,13,17,13,21,171,14,57,49,13,38,15,28,104,16,146,2,10,6,92,34,11,146,9,21,14,35,9,3,14,219,2,7,26,82,128,261,1,1,2,33,12,14,2,4,2,11,2,1,78,8,15,49,125,28,77,95,33,6,41,52,4,6,1,2,44,36,37,40,54,22,15,25,105,19,39,7,11,25,5,50,50,53,11,5,240,13,140,129,7,24,13,31,10,6,14,154,2,4,8,14,8,6,6,13,79,19,36,3,10,158,21,1,3,16,5,6,5,17,5,5,39,22,25,2,16,10,3,4,38,47,95,70,1,7,73,7,28,84,2,16,7,130,73,4,142,3,5,7,4,4,3,122,50,33,91,3,4,9,1,1,1,32,48,9,13,71,17,2,1,5,1,1,1,2,4,4,2,2,2,14,32,9,1,1,1,10,1,1,91,3,3,5,6,6,21,3,1,16,5,1,2,47,1,52,11,26,4,2,3,1,2,1,4,2,88,13,11,34,10,30,93,2,101,7,16,62,144,113,4,5,82,3,16,6,1,9,9,102,160,48,1,7,2,6,25,2,18,3,26,66,6,7,10,1,4,16,7,6,8,19,8,17,46,4,12,35,9,51,3,1,7,60,34,11,5,126,14,4,85,1,1,17,5,11,34,10,9,9,122,15,1,4,16,3,47,2,7,24,6,9,48,4,11,6,17,47,4,6,6,3,54,7,5,20,9,1,3,4,1,15,1,10,34,27,3,1,12,36,3,1,11,10,3,10,1,5,36,52,3,7,7,14,97,2,30,26,23,1,1,22,4,14,3,1,2,1,2,4,4,7,1,3,1,1,2,1,21,2,2,2,1,1,2,4,22,28,11,57,2,15,4,35,4,2,67,16,3,5,2,3,38,36,4,52,5,9,37,31,8,47,23,84,25,1,6,9,12,35,5,2,8,3,1,21,66,5,3,6,5,2,10,11,12,5,5,39,9,23,12,13,7,3,1,7,10,9,8,5,3,19,89,3,8,30,45,12,2,1,28,45,2,26,8,7,2,4,9,24,33,4,45,22,1,2,24,12,24,1,1,1,2,12,23,2,16,2,18,8,6,1,8,5,5,3,51,8,1,15,4,4,4,7,2,3,10,9,3,1,5,41,7,14,13,23,70,41,7,57,22,3,14,17,1,30,2,7,29,7,10,4,16,4,32,13,12,13,1,9,4,4,1,2,2,5,1,14,3,1,48,2,2,1,26,9,7,16,5,6,11,1,3,3,3,3,21,42,3,4,1,4,2,59,13,21,11,3,5,4,3,8,5,1,1,41,65,1,19,1,41,7,20,26,1,24,6,10,11,3,19,1,1,1,10,12,1,1,19,8,6,1,1,9,7,1,21,17,1,7,1,13,3,22,16,9,18,1,20,73,5,3,8,6,5,3,10,6,5,10,4,31,4,40,4,8,4,7,7,39,7,10,4,5,3,2,1,5,18,13,25,18,2,1,18,5,41,1,3,3,3,2,3,7,1,8,3,13,13,10,41,1,1,4,9,2,4,8,6,1,51,5,3,9,58,1,2,14,29,32,2,1,9,12,13,52,4,6,5,11,26,1,1,13,46,20,8,32,10,4,4,38,3,29,10,8,3,1,39,51,31,17,10,9,54,9,1,9,6,6,1,2,4,8,5,3,4,6,2,1,4,3,3,3,8,8,4,4,2,2,2,20,9,15,5,19,11,25,2,33,7,12,7,7,3,2,2,2,9,15,3,6,29,5,2,16,17,1,1,10,6,23,4,4,2,61,3,14,13,15,53,4,3,21,47,5,4,12,3,1,1,7,1,1,1,1,1,2,4,97,4,6,6,3,20,6,2,24,12,10,10,27,13,12,13,8,10,4,3,4,8,10,23,9,17,22,11,9,5,9,27,1,1,1,16,4,16,34,4,29,15,7,3,6,1,3,52,24,29,5,9,20,8,10,2,22,16,5,27,7,17,14,14,3,12,23,45,1,10,1,3,9,1,27,1,1,2,2,10,47,6,6,6,16,2,14,28,6,1,14,2,6,19,2,5,5,21,2,1,5,6,20,15,22,4,2,4,2,56,8,2,8,45,48,33,9,18,4,6,1,4,6,1,16,3,8,6,1,9,51,9,7,9,3,1,1,4,5,24,18,7,6,11,3,13,6,3,1,2,18,1,6,42,9,3,4,1,1,20,2,5,4,7,5,5,2,14,10,8,3,6,1,4,4,15,2,3,8,1,12,4,10,9,1,1,8,3,10,2,4,3,12,10,1,2,8,1,5,2,2,8,26,29,29,2,8,15,8,8,6,8,17,31,6,82,14,5,15,6,14,7,4,3,1,2,1,2,1,4,7,1,1,8,1,1,1,1,6,68,5,8,4,2,11,5,3,5,12,3,4,5,4,18,1,1,1,2,15,8,11,6,2,7,14,8,12,15,1,3,13,1,1,1,18,5,8,6,6,8,2,3,2,12,10,1,2,2,3,6,4,6,6,8,2,4,5,5,1,3,5,2,1,1,2,2,3,6,3,3,3,3,5,4,4,4,10,4,1,1,1,29,20,7,17,24,23,25,1,1,3,13,4,7,6,4,5,8,1,6,2,5,1,5,7,20,4,6,2,1,2,6,7,1,17,4,1,17,27,20,2,1,23,46,36,5,6,4,3,4,4,2,7,2,2,2,2,9,3,2,3,22,23,8,4,12,9,1,5,2,2,1,8,5,3,9,3,3,5,2,2,2,2,1,1,6,4,4,7,16,5,3,5,5,2,4,8,1,7,6,1,3,1,4,1,1,1,1,1,2,7,1,54,6,1,41,5,3,11,7,13,1,11,1,1,10,1,1,14,2,8,2,1,2,9,7,8,7,8,1,15,5,13,32,8,2,15,2,7,2,18,2,4,13,1,1,2,4,4,1,3,2,2,17,1,3,3,2,2,10,6,10,9,1,1,1,1,1,1,6,3,2,2,14,2,2,13,4,7,1,9,1,4,3,7,1,14,7,23,2,2,1,1,1,24,19,5,8,3,7,2,20,1,3,1,1,13,1,34,56,1,9,14,1,10,6,4,4,11,4,4,6,4,2,14,3,1,1,1,33,2,2,3,3,3,13,10,10,5,15,1,16,1,2,3,26,6,4,3,5,7,15,7,2,1,3,1,2,2,1,1,10,40,6,21,1,8,1,10,4,6,2,6,3,7,8,5,1,8,1,9,2,15,1,26,18,9,3,10,1,5,10,1,1,23,13,10,4,8,3,5,5,5,26,2,23,13,5,20,1,4,1,1,1,1,51,3,2,1,17,1,1,1,1,25,3,12,11,15,10,9,7,9,6,3,2,3,23,22,11,2,3,1,9,1,6,8,1,23,4,14,16,1,2,1,2,4,8,12,3,2,19,14,6,6,17,9,4,1,10,4,9,27,8,4,14,2,34,3,2,10,16,4,4,1,11,5,1,10,20,23,23,5,1,3,5,8,5,21,3,1,1,6,3,7,56,5,11,4,2,1,1,6,3,7,7,7,3,24,4,1,3,1,1,1,2,1,1,1,3,1,1,5,1,1,2,1,2,3,6,1,6,10,2,1,10,1,1,1,1,16,11,16,1,4,2,5,6,22,25,13,3,2,2,3,2,6,1,22,5,3,3,35,6,11,11,1,1,1,1,1,1,1,1,1,5,18,1,1,1,1,1,1,1,1,14,2,1,14,2,3,18,2,3,25,5,9,38,45,8,6,15,4,15,7,11,10,6,7,2,5,4,2,51,13,9,4,2,1,9,14,6,1,1,4,6,1,1,1,1,1,1,14,23,15,14,36,3,3,5,1,5,2,13,13,21,24,3,13,6,1,4,2,1,12,11,4,1,4,13,43,1,1,5,4,9,1,2,23,11,27,2,4,2,9,1,11,9,10,5,4,4,28,5,10,17,8,12,4,3,17,2,2,2,10,1,5,4,3,5,1,1,2,1,1,17,6,3,8,6,20,19,5,6,1,1,4,10,6,1,1,11,3,5,10,4,1,1,3,10,10,3,4,3,1,5,10,2,3,3,3,12,1,7,1,4,3,1,15,1,1,10,3,7,10,4,16,16,2,3,1,1,9,6,5,13,28,11,18,3,3,2,4,4,17,10,4,11,9,17,3,3,2,1,1,1,1,1,1,1,10,9,1,1,1,11,7,6,1,1,1,12,1,1,9,1,7,15,10,17,1,15,1,6,2,12,44,19,15,6,3,3,1,5,2,1,6,5,4,12,15,2,2,4,3,2,5,2,15,3,2,12,9,19,37,5,2,5,1,7,23,17,19,8,1,1,1,1,11,21,1,5,5,1,3,1,1,12,1,1,3,9,4,9,2,6,14,1,14,5,1,6,1,1,16,15,21,9,1,1,1,8,12,2,3,10,1,2,3,1,21,3,16,7,19,3,2,16,1,4,1,2,3,2,3,2,1,5,8,8,7,6,1,9,1,6,7,2,1,2,2,1,1,5,1,3,3,3,2,1,11,11,13,12,6,5,29,4,3,2,10,10,10,10,26,35,5,2,19,3,10,4,5,4,6,3,4,2,5,3,1,1,14,1,9,1,8,3,1,2,1,3,4,6,3,3,8,2,1,1,2,2,1,5,4,1,1,2,2,3,1,4,18,1,1,1,1,3,1,1,2,2,1,3,1,1,1,1,2,1,1,1,1,1,22,4,21,13,1,1,1,2,1,3,3,5,2,5,3,20,5,18,5,4,5,2,11,1,2,4,9,8,8,8,3,3,9,1,8,7,7,5,1,5,1,1,7,20,6,12,11,5,2,16,20,18,4,15,7,12,1,1,1,4,1,3,2,10,2,3,1,9,6,3,2,1,1,18,11,1,4,3,4,3,2,4,2,2,3,1,1,3,11,16,14,16,1,1,1,3,2,8,1,5,1,6,1,1,2,1,1,1,7,6,1,1,1,1,1,3,1,2,1,1,1,1,5,3,1,1,1,1,1,1,1,1,5,5,1,1,1,3,1,2,1,1,1,1,1,5,6,9,8,4,2,1,1,7,7,8,1,6,1,3,2,3,3,3,2,8,6,1,16,1,2,3,4,4,10,6,1,9,69,4,11,2,1,5,8,8,6,4,7,1,3,5,5,1,5,9,2,4,2,2,4,2,2,1,2,5,2,11,12,12,9,3,1,1,16,1,2,3,2,1,6,17,2,2,2,8,7,1,2,6,4,4,7,2,3,2,2,1,8,7,3,3,3,1,8,3,2,3,1,2,4,9,3,6,4,1,1,3,6,1,3,7,1,2,1,4,8,3,3,3,2,1,6,5,5,2,1,5,1,4,4,1,5,5,6,14,4,4,2,10,2,1,11,11,1,1,4,6,8,3,2,6,7,1,1,2,3,2,1,1,5,6,3,5,1,5,1,4,10,9,1,3,2,2,1,2,15,1,1,1,1,1,2,1,2,3,2,2,3,6,4,2,2,4,6,2,2,1,5,4,2,4,4,4,2,2,3,4,1,6,1,1,1,1,1,1,3,3,5,1,3,1,2)
c
c(1, 2, 3, 4, 5, 1, 1, 1)
c(1,1,1,1,1,1,1,1,1,3,20,13,119,11,11,10,1,34,57,100,2,14,1,14,4,30,79,10,20,15,13,17,13,21,171,14,57,49,13,38,15,28,104,16,146,2,10,6,92,34,11,146,9,21,14,35,9,3,14,219,2,7,26,82,128,261,1,1,2,33,12,14,2,4,2,11,2,1,78,8,15,49,125,28,77,95,33,6,41,52,4,6,1,2,44,36,37,40,54,22,15,25,105,19,39,7,11,25,5,50,50,53,11,5,240,13,140,129,7,24,13,31,10,6,14,154,2,4,8,14,8,6,6,13,79,19,36,3,10,158,21,1,3,16,5,6,5,17,5,5,39,22,25,2,16,10,3,4,38,47,95,70,1,7,73,7,28,84,2,16,7,130,73,4,142,3,5,7,4,4,3,122,50,33,91,3,4,9,1,1,1,32,48,9,13,71,17,2,1,5,1,1,1,2,4,4,2,2,2,14,32,9,1,1,1,10,1,1,91,3,3,5,6,6,21,3,1,16,5,1,2,47,1,52,11,26,4,2,3,1,2,1,4,2,88,13,11,34,10,30,93,2,101,7,16,62,144,113,4,5,82,3,16,6,1,9,9,102,160,48,1,7,2,6,25,2,18,3,26,66,6,7,10,1,4,16,7,6,8,19,8,17,46,4,12,35,9,51,3,1,7,60,34,11,5,126,14,4,85,1,1,17,5,11,34,10,9,9,122,15,1,4,16,3,47,2,7,24,6,9,48,4,11,6,17,47,4,6,6,3,54,7,5,20,9,1,3,4,1,15,1,10,34,27,3,1,12,36,3,1,11,10,3,10,1,5,36,52,3,7,7,14,97,2,30,26,23,1,1,22,4,14,3,1,2,1,2,4,4,7,1,3,1,1,2,1,21,2,2,2,1,1,2,4,22,28,11,57,2,15,4,35,4,2,67,16,3,5,2,3,38,36,4,52,5,9,37,31,8,47,23,84,25,1,6,9,12,35,5,2,8,3,1,21,66,5,3,6,5,2,10,11,12,5,5,39,9,23,12,13,7,3,1,7,10,9,8,5,3,19,89,3,8,30,45,12,2,1,28,45,2,26,8,7,2,4,9,24,33,4,45,22,1,2,24,12,24,1,1,1,2,12,23,2,16,2,18,8,6,1,8,5,5,3,51,8,1,15,4,4,4,7,2,3,10,9,3,1,5,41,7,14,13,23,70,41,7,57,22,3,14,17,1,30,2,7,29,7,10,4,16,4,32,13,12,13,1,9,4,4,1,2,2,5,1,14,3,1,48,2,2,1,26,9,7,16,5,6,11,1,3,3,3,3,21,42,3,4,1,4,2,59,13,21,11,3,5,4,3,8,5,1,1,41,65,1,19,1,41,7,20,26,1,24,6,10,11,3,19,1,1,1,10,12,1,1,19,8,6,1,1,9,7,1,21,17,1,7,1,13,3,22,16,9,18,1,20,73,5,3,8,6,5,3,10,6,5,10,4,31,4,40,4,8,4,7,7,39,7,10,4,5,3,2,1,5,18,13,25,18,2,1,18,5,41,1,3,3,3,2,3,7,1,8,3,13,13,10,41,1,1,4,9,2,4,8,6,1,51,5,3,9,58,1,2,14,29,32,2,1,9,12,13,52,4,6,5,11,26,1,1,13,46,20,8,32,10,4,4,38,3,29,10,8,3,1,39,51,31,17,10,9,54,9,1,9,6,6,1,2,4,8,5,3,4,6,2,1,4,3,3,3,8,8,4,4,2,2,2,20,9,15,5,19,11,25,2,33,7,12,7,7,3,2,2,2,9,15,3,6,29,5,2,16,17,1,1,10,6,23,4,4,2,61,3,14,13,15,53,4,3,21,47,5,4,12,3,1,1,7,1,1,1,1,1,2,4,97,4,6,6,3,20,6,2,24,12,10,10,27,13,12,13,8,10,4,3,4,8,10,23,9,17,22,11,9,5,9,27,1,1,1,16,4,16,34,4,29,15,7,3,6,1,3,52,24,29,5,9,20,8,10,2,22,16,5,27,7,17,14,14,3,12,23,45,1,10,1,3,9,1,27,1,1,2,2,10,47,6,6,6,16,2,14,28,6,1,14,2,6,19,2,5,5,21,2,1,5,6,20,15,22,4,2,4,2,56,8,2,8,45,48,33,9,18,4,6,1,4,6,1,16,3,8,6,1,9,51,9,7,9,3,1,1,4,5,24,18,7,6,11,3,13,6,3,1,2,18,1,6,42,9,3,4,1,1,20,2,5,4,7,5,5,2,14,10,8,3,6,1,4,4,15,2,3,8,1,12,4,10,9,1,1,8,3,10,2,4,3,12,10,1,2,8,1,5,2,2,8,26,29,29,2,8,15,8,8,6,8,17,31,6,82,14,5,15,6,14,7,4,3,1,2,1,2,1,4,7,1,1,8,1,1,1,1,6,68,5,8,4,2,11,5,3,5,12,3,4,5,4,18,1,1,1,2,15,8,11,6,2,7,14,8,12,15,1,3,13,1,1,1,18,5,8,6,6,8,2,3,2,12,10,1,2,2,3,6,4,6,6,8,2,4,5,5,1,3,5,2,1,1,2,2,3,6,3,3,3,3,5,4,4,4,10,4,1,1,1,29,20,7,17,24,23,25,1,1,3,13,4,7,6,4,5,8,1,6,2,5,1,5,7,20,4,6,2,1,2,6,7,1,17,4,1,17,27,20,2,1,23,46,36,5,6,4,3,4,4,2,7,2,2,2,2,9,3,2,3,22,23,8,4,12,9,1,5,2,2,1,8,5,3,9,3,3,5,2,2,2,2,1,1,6,4,4,7,16,5,3,5,5,2,4,8,1,7,6,1,3,1,4,1,1,1,1,1,2,7,1,54,6,1,41,5,3,11,7,13,1,11,1,1,10,1,1,14,2,8,2,1,2,9,7,8,7,8,1,15,5,13,32,8,2,15,2,7,2,18,2,4,13,1,1,2,4,4,1,3,2,2,17,1,3,3,2,2,10,6,10,9,1,1,1,1,1,1,6,3,2,2,14,2,2,13,4,7,1,9,1,4,3,7,1,14,7,23,2,2,1,1,1,24,19,5,8,3,7,2,20,1,3,1,1,13,1,34,56,1,9,14,1,10,6,4,4,11,4,4,6,4,2,14,3,1,1,1,33,2,2,3,3,3,13,10,10,5,15,1,16,1,2,3,26,6,4,3,5,7,15,7,2,1,3,1,2,2,1,1,10,40,6,21,1,8,1,10,4,6,2,6,3,7,8,5,1,8,1,9,2,15,1,26,18,9,3,10,1,5,10,1,1,23,13,10,4,8,3,5,5,5,26,2,23,13,5,20,1,4,1,1,1,1,51,3,2,1,17,1,1,1,1,25,3,12,11,15,10,9,7,9,6,3,2,3,23,22,11,2,3,1,9,1,6,8,1,23,4,14,16,1,2,1,2,4,8,12,3,2,19,14,6,6,17,9,4,1,10,4,9,27,8,4,14,2,34,3,2,10,16,4,4,1,11,5,1,10,20,23,23,5,1,3,5,8,5,21,3,1,1,6,3,7,56,5,11,4,2,1,1,6,3,7,7,7,3,24,4,1,3,1,1,1,2,1,1,1,3,1,1,5,1,1,2,1,2,3,6,1,6,10,2,1,10,1,1,1,1,16,11,16,1,4,2,5,6,22,25,13,3,2,2,3,2,6,1,22,5,3,3,35,6,11,11,1,1,1,1,1,1,1,1,1,5,18,1,1,1,1,1,1,1,1,14,2,1,14,2,3,18,2,3,25,5,9,38,45,8,6,15,4,15,7,11,10,6,7,2,5,4,2,51,13,9,4,2,1,9,14,6,1,1,4,6,1,1,1,1,1,1,14,23,15,14,36,3,3,5,1,5,2,13,13,21,24,3,13,6,1,4,2,1,12,11,4,1,4,13,43,1,1,5,4,9,1,2,23,11,27,2,4,2,9,1,11,9,10,5,4,4,28,5,10,17,8,12,4,3,17,2,2,2,10,1,5,4,3,5,1,1,2,1,1,17,6,3,8,6,20,19,5,6,1,1,4,10,6,1,1,11,3,5,10,4,1,1,3,10,10,3,4,3,1,5,10,2,3,3,3,12,1,7,1,4,3,1,15,1,1,10,3,7,10,4,16,16,2,3,1,1,9,6,5,13,28,11,18,3,3,2,4,4,17,10,4,11,9,17,3,3,2,1,1,1,1,1,1,1,10,9,1,1,1,11,7,6,1,1,1,12,1,1,9,1,7,15,10,17,1,15,1,6,2,12,44,19,15,6,3,3,1,5,2,1,6,5,4,12,15,2,2,4,3,2,5,2,15,3,2,12,9,19,37,5,2,5,1,7,23,17,19,8,1,1,1,1,11,21,1,5,5,1,3,1,1,12,1,1,3,9,4,9,2,6,14,1,14,5,1,6,1,1,16,15,21,9,1,1,1,8,12,2,3,10,1,2,3,1,21,3,16,7,19,3,2,16,1,4,1,2,3,2,3,2,1,5,8,8,7,6,1,9,1,6,7,2,1,2,2,1,1,5,1,3,3,3,2,1,11,11,13,12,6,5,29,4,3,2,10,10,10,10,26,35,5,2,19,3,10,4,5,4,6,3,4,2,5,3,1,1,14,1,9,1,8,3,1,2,1,3,4,6,3,3,8,2,1,1,2,2,1,5,4,1,1,2,2,3,1,4,18,1,1,1,1,3,1,1,2,2,1,3,1,1,1,1,2,1,1,1,1,1,22,4,21,13,1,1,1,2,1,3,3,5,2,5,3,20,5,18,5,4,5,2,11,1,2,4,9,8,8,8,3,3,9,1,8,7,7,5,1,5,1,1,7,20,6,12,11,5,2,16,20,18,4,15,7,12,1,1,1,4,1,3,2,10,2,3,1,9,6,3,2,1,1,18,11,1,4,3,4,3,2,4,2,2,3,1,1,3,11,16,14,16,1,1,1,3,2,8,1,5,1,6,1,1,2,1,1,1,7,6,1,1,1,1,1,3,1,2,1,1,1,1,5,3,1,1,1,1,1,1,1,1,5,5,1,1,1,3,1,2,1,1,1,1,1,5,6,9,8,4,2,1,1,7,7,8,1,6,1,3,2,3,3,3,2,8,6,1,16,1,2,3,4,4,10,6,1,9,69,4,11,2,1,5,8,8,6,4,7,1,3,5,5,1,5,9,2,4,2,2,4,2,2,1,2,5,2,11,12,12,9,3,1,1,16,1,2,3,2,1,6,17,2,2,2,8,7,1,2,6,4,4,7,2,3,2,2,1,8,7,3,3,3,1,8,3,2,3,1,2,4,9,3,6,4,1,1,3,6,1,3,7,1,2,1,4,8,3,3,3,2,1,6,5,5,2,1,5,1,4,4,1,5,5,6,14,4,4,2,10,2,1,11,11,1,1,4,6,8,3,2,6,7,1,1,2,3,2,1,1,5,6,3,5,1,5,1,4,10,9,1,3,2,2,1,2,15,1,1,1,1,1,2,1,2,3,2,2,3,6,4,2,2,4,6,2,2,1,5,4,2,4,4,4,2,2,3,4,1,6,1,1,1,1,1,1,3,3,5,1,3,1,2)
View
pwd
pwd
cwd
PWD
setwd("~/")
mydata <- read.table("gamesPerPlayer.csv")
mydata
mydata(1)
mydata[1]
mydata[:, 1]
mydata[., 1]
mydata[1, 1]
mydata(1, 1)
mydata
plot(mydata)
hist(mydata)
histogram
?hist
mydata(:)
as.array(mydata)
as.array(mydata, 1)
as.matrix(mydata)
mydata <- read.table("gamesPerPlayer.csv", header=TRUE)
mydata
hist(mydata)
mydata(:)
as.matrix(mydata)
as.number(mydata)
as.numeric(mydata)
as.double(mydata)
as.vector(mydata)
hist(as.vector(mydata))
mydata
summary(mydata)
hist(mydata)
as.numeric(mydata)
mydata
View(mydata)
hist(mydata$gamesPerPlayer)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer > 1])
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer < 100])
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer < 1])
hist(mydata$gamesPerPlayer)
?hist
hist(mydata$gamesPerPlayer, breaks=[5, 10, 20, 50, 100])
hist(mydata$gamesPerPlayer, breaks=(5, 10, 20, 50, 100))
hist(mydata$gamesPerPlayer, breaks=c(5, 10, 20, 50, 100))
hist(mydata$gamesPerPlayer, breaks=c(0, 5, 10, 20, 50, 100))
hist(mydata$gamesPerPlayer, breaks=c(0, 5, 10, 20, 50, 100, 500))
hist(mydata$gamesPerPlayer, breaks=c(0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 100, 500))
hist(mydata$gamesPerPlayer, breaks=10)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100], breaks=10)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100], breaks=20)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100], breaks=50)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100], breaks=100)
plot(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100])
?plot
plot(mydata[mydata$gamesPerPlayer <= 100])
plot(mydata[mydata$gamesPerPlayer <= 100, :])
plot(mydata[mydata$gamesPerPlayer <= 100, ])
plot(mydata)
line
line(mydata)
?plot
plot(mydata, type="l")
plot(mydata)
plot(mydata)
plot(mydata, type="l")
plot(mydata, type="l")
plot(mydata)
?plot
lines(mydata)
lines(mydata)
lines(mydata)
Library(matplot)
library(matplot)
library(matplotlib)
package.install(matplot)
install.packages(matplot)
install.packages('matplotlib')
install.packages('matplot')
install.packages('matplotlib')
mydata
mydata.
attributes(mydata)
mydata
mydata <- read.table("gamesPerPlayer.csv", header=TRUE)
mydata <- read.table("gamesPerPlayer.csv", header=TRUE,sep=",")
plot(x=mydata$numOfGames, y=mydata$count)
plot(x=mydata$numOfGames, y=mydata$count, type="l")
hist(x=mydata$numOfGames, y=mydata$count)
hist(x=mydata$numOfGames[mydata$numOfGames <= 100], y=mydata$count[mydata$numOfGames <= 100])
plot(x=mydata$numOfGames[mydata$numOfGames <= 100], y=mydata$count[mydata$numOfGames <= 100])
plot(x=mydata$numOfGames[mydata$numOfGames <= 100], y=mydata$count[mydata$numOfGames <= 100], type="l")
plot(x=mydata$numOfGames[mydata$numOfGames <= 100], y=mydata$count[mydata$numOfGames <= 100])
mydata <- read.table("gamesPerPlayer2.csv", header=TRUE)
mydata <- read.table("gamesPerPlayer2.csv", header=TRUE)
hist(mydata)
hist(mydata$gamesPerPlayer)
?hist
hist(mydata$gamesPerPlayer, breaks=max(mydata$gamesPerPlayer))
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=max(mydata$gamesPerPlayer))
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50])
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=50)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50])
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=50)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 100], breaks=100)
mydata <- read.table("gamesPerPlayer.csv", header=TRUE, sep=",")
plot(mydata)
mydata <- read.table("gamesPerPlayer2.csv", header=TRUE)
hist(mydata$gamesPerPlayer)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=50)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=25)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=10)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=25)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=50)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=25)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=5)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=10)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=25)
hist(mydata$gamesPerPlayer)
hist(mydata$gamesPerPlayer, breaks=10)
hist(mydata$gamesPerPlayer, breaks=20)
hist(mydata$gamesPerPlayer, breaks=50)
hist(mydata$gamesPerPlayer, breaks=[0,100])
hist(mydata$gamesPerPlayer, breaks=c(0,100))
hist(mydata$gamesPerPlayer, breaks=c(0,100, 300))
hist(mydata$gamesPerPlayer, breaks=c(0,1, 300))
hist(mydata$gamesPerPlayer, breaks=c(0,1,5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(0,5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(1,5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(1,2,5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(0,1,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer, breaks=c(0,1,5,10,15,20,30,40,50,100,300))
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50], breaks=25)
hist(mydata$gamesPerPlayer[mydata$gamesPerPlayer <= 50])
data=mydata
hist(data$gamesPerPlayer[data$gamesPerPlayer <= 50])
data
mydata <- read.table("gamesPerPlayer")
mydata <- read.table("gamesPerPlayer.csv", header=TRUE, sep=",")
data <- read.csv('realGamesPerPlayer.csv')
data
View(data)
data <- read.csv('realGamesPerPlayer.csv')
hist(data)
plot(data)
data <- read.csv('realGamesPerPlayer.csv')
plot(data)
data = read.csv('guessTime.csv')
data = read.csv('guessTime.csv', header=FALSE)
summary(data)
data$V1
hist(data$V1)
data = read.csv('guessTime.csv', header=FALSE)
hist(data$V1)
hist(data$V1[data$V1 < 100000])
hist(data$V1[data$V1 < 20000])
hist(data$V1[data$V1 < 10000])
hist(data$V1[data$V1 < 6000])
?hist
hist(data$V1[data$V1 < 6000], breaks=10)
hist(data$V1[data$V1 < 6000], breaks=20)
hist(data$V1[data$V1 < 6000], breaks=30)
hist(data$V1[data$V1 < 6000], breaks=40)
hist(data$V1[data$V1 < 6000], breaks=50)
hist(data$V1[data$V1 < 5000], breaks=50)
mean(data$V1)
median(data$V1)
hist(data$V1[data$V1 < 10000], breaks=50)
data = read.csv('timestamp.csv', header=FALSE)
data
View(data)
hist(data$V1)
data = read.csv('timestamp.csv', header=FALSE)
hist(data$V1)
hist(data$V1)
data = read.csv('timestamp.csv', header=FALSE)
data = read.csv('timestamp.csv', header=FALSE)
hist(data$V1)
hist(data$V1 + 9)
hist(data$V1)
hist((data$V1 + 9) % 24)
hist((data$V1 + 9))
hist(data$V1)
hist((data$V1 + 2))
data$V1 = data$V1 + 2
data$V1[data$V1 >= 24] = data$V1[data$V1 >= 24] - 24
hist(data$V1)
data$V1
View(data)
View(data)
data$V1 == 23
mean(data$V1 == 23)
hist(data$V1, breaks=24)
hist(data$V1, breaks=0:24)
hist(data$V1)
rm(list = ls())
rm(list = ls())
library(ElemStatLearn)
data("spam")
rm(list = ls())
library(ElemStatLearn)
data(spam)
as.numeric(TRUE)
as.numeric(FALSE)
spam$spam
spam$spam == "spam"
as.numeric(spam$spam == "spam")
as.numeric(spam$spam == "spam")
"1" == 1
"1" === 1
install.packages(glmnet)
install.packages("glmnet)
install.packages("glmnet")
?glmnet
library(glmnet)
install.packages("glmnet")
?cv.glmnet
library(glmnet)
install.packages(glmnet)
install.packages('glmnet')
?cv.glmnet
library(glmnet)
dnorm
x = seq(1200, 1400)
dnorm(x, mean = 1280, sd = 16)
matplot(x, dnorm(x, mean = 1280, sd = 16))
lines(x, dbinom(x, size = 1600, p = 0.8))
lines(x, dbinom(x, size = 1600, p = 0.9))
lines(x, dbinom(x, size = 1600, p = 0.7))
matplot(x, dbinom(x, size = 1600, p = 0.8))
matplot(x, dnorm(x, mean = 1280, sd = 16), type = "l")
lines(x, dbinom(x, size = 1600, p = 0.8), line = "l")
lines(x, dbinom(x, size = 1600, p = 0.75), line = "l")
x = seq(0, 100)
install.packages('devtools')
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
install.packages('caret')
?step
getModelInfo
library(caret)
library(caret)
getModelInfo
getModelInfo()
names(getModelInfo())
load("bostonhousing.rdata")
setwd("~/Dropbox/Informatikk/STK4030/Statistical-learning/project")
load("bostonhousing.rdata")
boston = load("bostonhousing.rdata")
?load
0.03:0.04:0.005
0.03:0.005:0.04
seq(0.04, 0.05, 0.001)
seq(0.0, 1.0, 0.1)
0.03:0.04
source('~/Downloads/Problem+2.r', echo=TRUE)
library(caret)
rm(list = ls())
setwd("~/Dropbox/Informatikk/STK4030/Statistical-learning/project")
set.seed(4030)
AllColumnsExcept = function(df, col.names) {
return(df[, !(names(df) %in% col.names)])
}
load("bostonhousing.rdata")
training.data = data[data$train == TRUE, ]
training.data = AllColumnsExcept(training.data, 'train')
test.data = data[data$train == FALSE, ]
test.data = AllColumnsExcept(test.data, 'train')
# 1.1
# Estimate a linear Gaussian regression model including all 14 independent variables by (ordinary) least squares (OLS) on the training set.
lgr.model = lm(y ~ ., training.data)
# Report the estimated coefficients.
print(lgr.model$coefficients)
# Which covariates have the strongest association with y?
# In particular, the study focused on the effect of air pollution, measured through the concentrations of nitrogen oxide pollutants (nox) and particulate (part).
# Correlations
cor(training.data$y, training.data, method = "pearson")
# 1. lstat
# 2. rm
# 3. tax
# 4. indus
# 5. nox
# 6. crim
# Coefficient on standardized regression model
scaled.training.data = lapply(training.data, scale)
scaled.model = lm(y ~ ., scaled.training.data)
summary(scaled.model)
# 1. lstat
# 2. rad
# 3. dis
# 4. tax
# 5. crim
# 6. nox
# Incremental/partial R2.
# Gain in R2 when adding variable as the last one
# TODO
# Do they have any effect on the house price? If yes, which kind of effect?
# - part has a (statistically insignificant) negative effect on housing prices
# - nox has a (statistically significant) negative effect on housing prices
# 1.2
# The model above can be also used to predict the price for the other tracts (test set).
source('~/Downloads/Problem+2.r', echo=TRUE)
knn.loc.model
knn.cv10.model
plot(knn.cv10.model)
plot(knn.cv5.model, knn.cv10.model)
plot(knn.cv5.model)
lines(knn.cv10.model)
keep
plot(knn.cv5.model, add = TRUE)
plot(knn.cv10.model, add = TRUE)
plot(knn.cv5.model)
plot(knn.cv10.model)
plot(knn.loo.model)
knn.cv5.model$modelInfo
knn.cv5.model$results
knn.cv5.model$results$accuracy
knn.cv5.model$results$Accuracy
knn.cv5.model$results['k']
knn.cv5.model$results['Accuracy']
merge(knn.cv5.model$results['Accuracy'], knn.cv5.model$results['Accuracy'])
merge(knn.cv5.model$results['Accuracy'], knn.cv10.model$results['Accuracy'])
c(knn.cv5.model$results['Accuracy'], knn.cv10.model$results['Accuracy'])
lines(knn.cv10.model$results$Accuracy)
plot(knn.cv5.model)
lines(knn.cv10.model$results$Accuracy)
plot(knn.cv10.model$results$Accuracy, add = TRUE)
plot(knn.cv5.model$results$Accuracy, add = TRUE)
plot(knn.loo.model$results$Accuracy, add = TRUE)
plot(knn.cv5.model)
plot(knn.cv10.model)
plot(knn.cv5.model)
plot(knn.cv10.model)
knn.loo.model$results['Accuracy']
plot(knn.cv5.model)
plot(knn.loo.model$results$Accuracy, add = TRUE)
lines(knn.cv5.model$results$Accuracy)
lines(knn.cv5.model$results$Accuracy)
plot()
plot(knn.loo.model$results$Accuracy)
plot(knn.loo.model$results$Accuracy, lty = 'l')
plot(knn.loo.model$results$Accuracy, type = 'l')
plot(knn.loo.model$results$Accuracy, type = 'lc')
plot(knn.loo.model$results$Accuracy, type = 'l')
plot(knn.loo.model$results$Accuracy, type = 'l')
plot(knn.cv5.model$results$Accuracy, type = 'l', col = 2)
plot(knn.loo.model$results$Accuracy, type = 'l')
plot(knn.cv5.model$results$Accuracy, type = 'l', col = 2, add = TRUE)
plot(knn.loo.model$results$Accuracy, type = 'b')
lines(knn.cv5.model$results$Accuracy, type = 'b', col = 2)
lines(knn.cv10.model$results$Accuracy, type = 'b', col = 3)
p = plot(knn.loo.model)
p
?lines
?plot
?plot
